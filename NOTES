## Introduction

I guess you could consider this program a compiler, a comic strip compiler.

Compare:

    gcc  -o myprogram.exe -lcommon myprogram.c
    cbcc -o episode13.png -lcommon episode13.script

You see the connection, I'm sure. What we're doing, given a library of
common background images (functions, data structures) we compile our
script (source program) and link the resulting panels (object files)
into a single comic strip (executable).

This insight allows us to ignore the fact that this seems to be a fairly
new type of application, and instead draw on the general knowledge of
compiler building. It's somewhere to start!



## Resources

Some tools to use along the way:

*   parsec: parsing the input scripts
*   tagsoup: parsing the image maps to locate characters
*   diagrams: generating the comic panels

These have some lower level dependencies but they shouldn't matter at
this point.



## Stages

The following steps more or less fit the standard compiler process of lexing,
parsing, evaluating, code generation and linking. I'm not sure what optimisation
would mean in this application, but presumably it would have something to do
with layout of paragraph bubbles and such.

1.  Parse the input script into preamble, sections and scene content.
2.  Combine this into a proper syntax tree
    - ensure at least one bg image specified (first scene)
3.  Parse image maps for each scene and annotate script syntax tree
    - ensure character with dialogue is visible in image
4.  Lay out speech bubbles
    - leave room for characters
    - use proper left-to-right and top-to-bottom ordering
5.  Generate output images
6.  Create final comic
    - stich images together
    - create animation (animgif style)



## Further thoughts

The linking stage (shall we call it stitching, to be more evocative of the idea
of panels rather than binary objects?) should probably be given some guidelines on
arrangement of panels --- all in a line, 2 across, etc.

Might need to make further changes to diagrams package to stitch images together
into some kind of montage. Or maybe that can be done using a different tool. If I
write out the images as separate panels and treat the last stage as a separate
linking (er, stitching) process it can be as separate as needed.

This also leads the way for animated sequences. If there is only one background
image/scene and the characters have a back-and-forth conversation this will
translate very well to simple flickbook animation.
